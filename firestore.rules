rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if true;
    // }
    match /index {
      allow read, write: if false;
    }

    match /users/{userId} {
    	allow read, write: if request.auth.uid == userId;
    }

    match /{org}/chat {
      allow read: if isMember(org);

      match /subscriptions/{uid} {
        allow read, write: if isOwner(uid);
      }
      match /chats/{chatId} {
        allow read, write: if resource.data.subs[request.auth.uid];
      }
    }

    match /{org}/public {
      allow read, write: if isAdmin(org);
      allow read: if isMember(org);

      match /docs/roles {
        allow read, write: if isAdmin(org);
        allow read: if isMember(org);
      }
      match /users/{uid} {
        allow get: if isOwner(uid);
      }
    } 
    

    match /{org}/private/docs {
      match /roleKeys {
        allow read, write: if isAdmin(org);
      }
      match /userData {
        allow read, write: if isAdmin(org);
      }
    }

    match /{org}/agenda {
      allow read, write: if isAdmin(org);
      allow read: if isMember(org);

      match /schedules/{scheduleName} {
        allow read, write: if isAdmin(org);
        allow read: if isMember(org);
      }
      match /availability/{uid} {
        allow read, write: if isMember(org) && isOwner(uid);
        allow read, write: if isAdmin(org);
      }
      match /unpublished/{sch} {
         allow read, write: if isAdmin(org);
      }
    }

    function isOwner(uid) {
    	return uid == request.auth.uid;
    }
    function isMember(org) {
      //
      return exists(/databases/$(database)/documents/$(org)/public/users/$(request.auth.uid));
    }
    function isAdmin(org) {
      //
      return get(/databases/$(database)/documents/$(org)/public/users/$(request.auth.uid)).data.admin;
    }
  }
}